/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const M64P_MEM_INVALID: u32 = 4294967295;
pub const BREAKPOINTS_MAX_NUMBER: u32 = 128;
pub const PLUGIN_NONE: u32 = 1;
pub const PLUGIN_MEMPAK: u32 = 2;
pub const PLUGIN_RUMBLE_PAK: u32 = 3;
pub const PLUGIN_TRANSFER_PAK: u32 = 4;
pub const PLUGIN_RAW: u32 = 5;
pub const PLUGIN_BIO_PAK: u32 = 6;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type m64p_dynlib_handle = *mut ::std::os::raw::c_void;
pub type m64p_handle = *mut ::std::os::raw::c_void;
pub type m64p_function = ::std::option::Option<unsafe extern "C" fn()>;
pub type m64p_frame_callback =
    ::std::option::Option<unsafe extern "C" fn(FrameIndex: ::std::os::raw::c_uint)>;
pub type m64p_input_callback = ::std::option::Option<unsafe extern "C" fn()>;
pub type m64p_audio_callback = ::std::option::Option<unsafe extern "C" fn()>;
pub type m64p_vi_callback = ::std::option::Option<unsafe extern "C" fn()>;
pub const m64p_type_M64TYPE_INT: m64p_type = 1;
pub const m64p_type_M64TYPE_FLOAT: m64p_type = 2;
pub const m64p_type_M64TYPE_BOOL: m64p_type = 3;
pub const m64p_type_M64TYPE_STRING: m64p_type = 4;
pub type m64p_type = ::std::os::raw::c_int;
pub const m64p_msg_level_M64MSG_ERROR: m64p_msg_level = 1;
pub const m64p_msg_level_M64MSG_WARNING: m64p_msg_level = 2;
pub const m64p_msg_level_M64MSG_INFO: m64p_msg_level = 3;
pub const m64p_msg_level_M64MSG_STATUS: m64p_msg_level = 4;
pub const m64p_msg_level_M64MSG_VERBOSE: m64p_msg_level = 5;
pub type m64p_msg_level = ::std::os::raw::c_int;
pub const m64p_error_M64ERR_SUCCESS: m64p_error = 0;
pub const m64p_error_M64ERR_NOT_INIT: m64p_error = 1;
pub const m64p_error_M64ERR_ALREADY_INIT: m64p_error = 2;
pub const m64p_error_M64ERR_INCOMPATIBLE: m64p_error = 3;
pub const m64p_error_M64ERR_INPUT_ASSERT: m64p_error = 4;
pub const m64p_error_M64ERR_INPUT_INVALID: m64p_error = 5;
pub const m64p_error_M64ERR_INPUT_NOT_FOUND: m64p_error = 6;
pub const m64p_error_M64ERR_NO_MEMORY: m64p_error = 7;
pub const m64p_error_M64ERR_FILES: m64p_error = 8;
pub const m64p_error_M64ERR_INTERNAL: m64p_error = 9;
pub const m64p_error_M64ERR_INVALID_STATE: m64p_error = 10;
pub const m64p_error_M64ERR_PLUGIN_FAIL: m64p_error = 11;
pub const m64p_error_M64ERR_SYSTEM_FAIL: m64p_error = 12;
pub const m64p_error_M64ERR_UNSUPPORTED: m64p_error = 13;
pub const m64p_error_M64ERR_WRONG_TYPE: m64p_error = 14;
pub type m64p_error = ::std::os::raw::c_int;
pub const m64p_core_caps_M64CAPS_DYNAREC: m64p_core_caps = 1;
pub const m64p_core_caps_M64CAPS_DEBUGGER: m64p_core_caps = 2;
pub const m64p_core_caps_M64CAPS_CORE_COMPARE: m64p_core_caps = 4;
pub type m64p_core_caps = ::std::os::raw::c_int;
pub const m64p_plugin_type_M64PLUGIN_NULL: m64p_plugin_type = 0;
pub const m64p_plugin_type_M64PLUGIN_RSP: m64p_plugin_type = 1;
pub const m64p_plugin_type_M64PLUGIN_GFX: m64p_plugin_type = 2;
pub const m64p_plugin_type_M64PLUGIN_AUDIO: m64p_plugin_type = 3;
pub const m64p_plugin_type_M64PLUGIN_INPUT: m64p_plugin_type = 4;
pub const m64p_plugin_type_M64PLUGIN_CORE: m64p_plugin_type = 5;
pub type m64p_plugin_type = ::std::os::raw::c_int;
pub const m64p_emu_state_M64EMU_STOPPED: m64p_emu_state = 1;
pub const m64p_emu_state_M64EMU_RUNNING: m64p_emu_state = 2;
pub const m64p_emu_state_M64EMU_PAUSED: m64p_emu_state = 3;
pub type m64p_emu_state = ::std::os::raw::c_int;
pub const m64p_video_mode_M64VIDEO_NONE: m64p_video_mode = 1;
pub const m64p_video_mode_M64VIDEO_WINDOWED: m64p_video_mode = 2;
pub const m64p_video_mode_M64VIDEO_FULLSCREEN: m64p_video_mode = 3;
pub type m64p_video_mode = ::std::os::raw::c_int;
pub const m64p_video_flags_M64VIDEOFLAG_SUPPORT_RESIZING: m64p_video_flags = 1;
pub type m64p_video_flags = ::std::os::raw::c_int;
pub const m64p_core_param_M64CORE_EMU_STATE: m64p_core_param = 1;
pub const m64p_core_param_M64CORE_VIDEO_MODE: m64p_core_param = 2;
pub const m64p_core_param_M64CORE_SAVESTATE_SLOT: m64p_core_param = 3;
pub const m64p_core_param_M64CORE_SPEED_FACTOR: m64p_core_param = 4;
pub const m64p_core_param_M64CORE_SPEED_LIMITER: m64p_core_param = 5;
pub const m64p_core_param_M64CORE_VIDEO_SIZE: m64p_core_param = 6;
pub const m64p_core_param_M64CORE_AUDIO_VOLUME: m64p_core_param = 7;
pub const m64p_core_param_M64CORE_AUDIO_MUTE: m64p_core_param = 8;
pub const m64p_core_param_M64CORE_INPUT_GAMESHARK: m64p_core_param = 9;
pub const m64p_core_param_M64CORE_STATE_LOADCOMPLETE: m64p_core_param = 10;
pub const m64p_core_param_M64CORE_STATE_SAVECOMPLETE: m64p_core_param = 11;
pub type m64p_core_param = ::std::os::raw::c_int;
pub const m64p_command_M64CMD_NOP: m64p_command = 0;
pub const m64p_command_M64CMD_ROM_OPEN: m64p_command = 1;
pub const m64p_command_M64CMD_ROM_CLOSE: m64p_command = 2;
pub const m64p_command_M64CMD_ROM_GET_HEADER: m64p_command = 3;
pub const m64p_command_M64CMD_ROM_GET_SETTINGS: m64p_command = 4;
pub const m64p_command_M64CMD_EXECUTE: m64p_command = 5;
pub const m64p_command_M64CMD_STOP: m64p_command = 6;
pub const m64p_command_M64CMD_PAUSE: m64p_command = 7;
pub const m64p_command_M64CMD_RESUME: m64p_command = 8;
pub const m64p_command_M64CMD_CORE_STATE_QUERY: m64p_command = 9;
pub const m64p_command_M64CMD_STATE_LOAD: m64p_command = 10;
pub const m64p_command_M64CMD_STATE_SAVE: m64p_command = 11;
pub const m64p_command_M64CMD_STATE_SET_SLOT: m64p_command = 12;
pub const m64p_command_M64CMD_SEND_SDL_KEYDOWN: m64p_command = 13;
pub const m64p_command_M64CMD_SEND_SDL_KEYUP: m64p_command = 14;
pub const m64p_command_M64CMD_SET_FRAME_CALLBACK: m64p_command = 15;
pub const m64p_command_M64CMD_TAKE_NEXT_SCREENSHOT: m64p_command = 16;
pub const m64p_command_M64CMD_CORE_STATE_SET: m64p_command = 17;
pub const m64p_command_M64CMD_READ_SCREEN: m64p_command = 18;
pub const m64p_command_M64CMD_RESET: m64p_command = 19;
pub const m64p_command_M64CMD_ADVANCE_FRAME: m64p_command = 20;
pub const m64p_command_M64CMD_SET_MEDIA_LOADER: m64p_command = 21;
pub const m64p_command_M64CMD_NETPLAY_INIT: m64p_command = 22;
pub const m64p_command_M64CMD_NETPLAY_CONTROL_PLAYER: m64p_command = 23;
pub const m64p_command_M64CMD_NETPLAY_GET_VERSION: m64p_command = 24;
pub const m64p_command_M64CMD_NETPLAY_CLOSE: m64p_command = 25;
pub type m64p_command = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_cheat_code {
    pub address: u32,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_m64p_cheat_code() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_cheat_code> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_cheat_code>(),
        8usize,
        concat!("Size of: ", stringify!(m64p_cheat_code))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_cheat_code>(),
        4usize,
        concat!("Alignment of ", stringify!(m64p_cheat_code))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_cheat_code),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_cheat_code),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_media_loader {
    pub cb_data: *mut ::std::os::raw::c_void,
    pub get_gb_cart_rom: ::std::option::Option<
        unsafe extern "C" fn(
            cb_data: *mut ::std::os::raw::c_void,
            controller_num: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub get_gb_cart_ram: ::std::option::Option<
        unsafe extern "C" fn(
            cb_data: *mut ::std::os::raw::c_void,
            controller_num: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub get_dd_rom: ::std::option::Option<
        unsafe extern "C" fn(cb_data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
    >,
    pub get_dd_disk: ::std::option::Option<
        unsafe extern "C" fn(cb_data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_m64p_media_loader() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_media_loader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_media_loader>(),
        40usize,
        concat!("Size of: ", stringify!(m64p_media_loader))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_media_loader>(),
        8usize,
        concat!("Alignment of ", stringify!(m64p_media_loader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_media_loader),
            "::",
            stringify!(cb_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gb_cart_rom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_media_loader),
            "::",
            stringify!(get_gb_cart_rom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gb_cart_ram) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_media_loader),
            "::",
            stringify!(get_gb_cart_ram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_dd_rom) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_media_loader),
            "::",
            stringify!(get_dd_rom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_dd_disk) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_media_loader),
            "::",
            stringify!(get_dd_disk)
        )
    );
}
pub const m64p_system_type_SYSTEM_NTSC: m64p_system_type = 0;
pub const m64p_system_type_SYSTEM_PAL: m64p_system_type = 1;
pub const m64p_system_type_SYSTEM_MPAL: m64p_system_type = 2;
pub type m64p_system_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_rom_header {
    pub init_PI_BSB_DOM1_LAT_REG: u8,
    pub init_PI_BSB_DOM1_PGS_REG: u8,
    pub init_PI_BSB_DOM1_PWD_REG: u8,
    pub init_PI_BSB_DOM1_PGS_REG2: u8,
    pub ClockRate: u32,
    pub PC: u32,
    pub Release: u32,
    pub CRC1: u32,
    pub CRC2: u32,
    pub Unknown: [u32; 2usize],
    pub Name: [u8; 20usize],
    pub unknown: u32,
    pub Manufacturer_ID: u32,
    pub Cartridge_ID: u16,
    pub Country_code: u16,
}
#[test]
fn bindgen_test_layout_m64p_rom_header() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_rom_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_rom_header>(),
        64usize,
        concat!("Size of: ", stringify!(m64p_rom_header))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_rom_header>(),
        4usize,
        concat!("Alignment of ", stringify!(m64p_rom_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_PI_BSB_DOM1_LAT_REG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(init_PI_BSB_DOM1_LAT_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_PI_BSB_DOM1_PGS_REG) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(init_PI_BSB_DOM1_PGS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_PI_BSB_DOM1_PWD_REG) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(init_PI_BSB_DOM1_PWD_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_PI_BSB_DOM1_PGS_REG2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(init_PI_BSB_DOM1_PGS_REG2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClockRate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(ClockRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PC) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(PC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRC1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(CRC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRC2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(CRC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unknown) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Manufacturer_ID) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Manufacturer_ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Cartridge_ID) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Cartridge_ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Country_code) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_header),
            "::",
            stringify!(Country_code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_rom_settings {
    pub goodname: [::std::os::raw::c_char; 256usize],
    pub MD5: [::std::os::raw::c_char; 33usize],
    pub savetype: ::std::os::raw::c_uchar,
    pub status: ::std::os::raw::c_uchar,
    pub players: ::std::os::raw::c_uchar,
    pub rumble: ::std::os::raw::c_uchar,
    pub transferpak: ::std::os::raw::c_uchar,
    pub mempak: ::std::os::raw::c_uchar,
    pub biopak: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_m64p_rom_settings() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_rom_settings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_rom_settings>(),
        296usize,
        concat!("Size of: ", stringify!(m64p_rom_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_rom_settings>(),
        1usize,
        concat!("Alignment of ", stringify!(m64p_rom_settings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).goodname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(goodname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MD5) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(MD5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savetype) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(savetype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).players) as usize - ptr as usize },
        291usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(players)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rumble) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(rumble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transferpak) as usize - ptr as usize },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(transferpak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mempak) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(mempak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).biopak) as usize - ptr as usize },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_rom_settings),
            "::",
            stringify!(biopak)
        )
    );
}
pub const m64p_dbg_state_M64P_DBG_RUN_STATE: m64p_dbg_state = 1;
pub const m64p_dbg_state_M64P_DBG_PREVIOUS_PC: m64p_dbg_state = 2;
pub const m64p_dbg_state_M64P_DBG_NUM_BREAKPOINTS: m64p_dbg_state = 3;
pub const m64p_dbg_state_M64P_DBG_CPU_DYNACORE: m64p_dbg_state = 4;
pub const m64p_dbg_state_M64P_DBG_CPU_NEXT_INTERRUPT: m64p_dbg_state = 5;
pub type m64p_dbg_state = ::std::os::raw::c_int;
pub const m64p_dbg_runstate_M64P_DBG_RUNSTATE_PAUSED: m64p_dbg_runstate = 0;
pub const m64p_dbg_runstate_M64P_DBG_RUNSTATE_STEPPING: m64p_dbg_runstate = 1;
pub const m64p_dbg_runstate_M64P_DBG_RUNSTATE_RUNNING: m64p_dbg_runstate = 2;
pub type m64p_dbg_runstate = ::std::os::raw::c_int;
pub const m64p_dbg_mem_info_M64P_DBG_MEM_TYPE: m64p_dbg_mem_info = 1;
pub const m64p_dbg_mem_info_M64P_DBG_MEM_FLAGS: m64p_dbg_mem_info = 2;
pub const m64p_dbg_mem_info_M64P_DBG_MEM_HAS_RECOMPILED: m64p_dbg_mem_info = 3;
pub const m64p_dbg_mem_info_M64P_DBG_MEM_NUM_RECOMPILED: m64p_dbg_mem_info = 4;
pub const m64p_dbg_mem_info_M64P_DBG_RECOMP_OPCODE: m64p_dbg_mem_info = 16;
pub const m64p_dbg_mem_info_M64P_DBG_RECOMP_ARGS: m64p_dbg_mem_info = 17;
pub const m64p_dbg_mem_info_M64P_DBG_RECOMP_ADDR: m64p_dbg_mem_info = 18;
pub type m64p_dbg_mem_info = ::std::os::raw::c_int;
pub const m64p_dbg_mem_type_M64P_MEM_NOMEM: m64p_dbg_mem_type = 0;
pub const m64p_dbg_mem_type_M64P_MEM_NOTHING: m64p_dbg_mem_type = 1;
pub const m64p_dbg_mem_type_M64P_MEM_RDRAM: m64p_dbg_mem_type = 2;
pub const m64p_dbg_mem_type_M64P_MEM_RDRAMREG: m64p_dbg_mem_type = 3;
pub const m64p_dbg_mem_type_M64P_MEM_RSPMEM: m64p_dbg_mem_type = 4;
pub const m64p_dbg_mem_type_M64P_MEM_RSPREG: m64p_dbg_mem_type = 5;
pub const m64p_dbg_mem_type_M64P_MEM_RSP: m64p_dbg_mem_type = 6;
pub const m64p_dbg_mem_type_M64P_MEM_DP: m64p_dbg_mem_type = 7;
pub const m64p_dbg_mem_type_M64P_MEM_DPS: m64p_dbg_mem_type = 8;
pub const m64p_dbg_mem_type_M64P_MEM_VI: m64p_dbg_mem_type = 9;
pub const m64p_dbg_mem_type_M64P_MEM_AI: m64p_dbg_mem_type = 10;
pub const m64p_dbg_mem_type_M64P_MEM_PI: m64p_dbg_mem_type = 11;
pub const m64p_dbg_mem_type_M64P_MEM_RI: m64p_dbg_mem_type = 12;
pub const m64p_dbg_mem_type_M64P_MEM_SI: m64p_dbg_mem_type = 13;
pub const m64p_dbg_mem_type_M64P_MEM_FLASHRAMSTAT: m64p_dbg_mem_type = 14;
pub const m64p_dbg_mem_type_M64P_MEM_ROM: m64p_dbg_mem_type = 15;
pub const m64p_dbg_mem_type_M64P_MEM_PIF: m64p_dbg_mem_type = 16;
pub const m64p_dbg_mem_type_M64P_MEM_MI: m64p_dbg_mem_type = 17;
pub const m64p_dbg_mem_type_M64P_MEM_BREAKPOINT: m64p_dbg_mem_type = 18;
pub type m64p_dbg_mem_type = ::std::os::raw::c_int;
pub const m64p_dbg_mem_flags_M64P_MEM_FLAG_READABLE: m64p_dbg_mem_flags = 1;
pub const m64p_dbg_mem_flags_M64P_MEM_FLAG_WRITABLE: m64p_dbg_mem_flags = 2;
pub const m64p_dbg_mem_flags_M64P_MEM_FLAG_READABLE_EMUONLY: m64p_dbg_mem_flags = 4;
pub const m64p_dbg_mem_flags_M64P_MEM_FLAG_WRITABLE_EMUONLY: m64p_dbg_mem_flags = 8;
pub type m64p_dbg_mem_flags = ::std::os::raw::c_int;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_RDRAM: m64p_dbg_memptr_type = 1;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_PI_REG: m64p_dbg_memptr_type = 2;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_SI_REG: m64p_dbg_memptr_type = 3;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_VI_REG: m64p_dbg_memptr_type = 4;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_RI_REG: m64p_dbg_memptr_type = 5;
pub const m64p_dbg_memptr_type_M64P_DBG_PTR_AI_REG: m64p_dbg_memptr_type = 6;
pub type m64p_dbg_memptr_type = ::std::os::raw::c_int;
pub const m64p_dbg_cpu_data_M64P_CPU_PC: m64p_dbg_cpu_data = 1;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_REG: m64p_dbg_cpu_data = 2;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_HI: m64p_dbg_cpu_data = 3;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_LO: m64p_dbg_cpu_data = 4;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_COP0: m64p_dbg_cpu_data = 5;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_COP1_DOUBLE_PTR: m64p_dbg_cpu_data = 6;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_COP1_SIMPLE_PTR: m64p_dbg_cpu_data = 7;
pub const m64p_dbg_cpu_data_M64P_CPU_REG_COP1_FGR_64: m64p_dbg_cpu_data = 8;
pub const m64p_dbg_cpu_data_M64P_CPU_TLB: m64p_dbg_cpu_data = 9;
pub type m64p_dbg_cpu_data = ::std::os::raw::c_int;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_ADD_ADDR: m64p_dbg_bkp_command = 1;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_ADD_STRUCT: m64p_dbg_bkp_command = 2;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_REPLACE: m64p_dbg_bkp_command = 3;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_REMOVE_ADDR: m64p_dbg_bkp_command = 4;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_REMOVE_IDX: m64p_dbg_bkp_command = 5;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_ENABLE: m64p_dbg_bkp_command = 6;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_DISABLE: m64p_dbg_bkp_command = 7;
pub const m64p_dbg_bkp_command_M64P_BKP_CMD_CHECK: m64p_dbg_bkp_command = 8;
pub type m64p_dbg_bkp_command = ::std::os::raw::c_int;
pub const m64p_dbg_bkp_flags_M64P_BKP_FLAG_ENABLED: m64p_dbg_bkp_flags = 1;
pub const m64p_dbg_bkp_flags_M64P_BKP_FLAG_READ: m64p_dbg_bkp_flags = 2;
pub const m64p_dbg_bkp_flags_M64P_BKP_FLAG_WRITE: m64p_dbg_bkp_flags = 4;
pub const m64p_dbg_bkp_flags_M64P_BKP_FLAG_EXEC: m64p_dbg_bkp_flags = 8;
pub const m64p_dbg_bkp_flags_M64P_BKP_FLAG_LOG: m64p_dbg_bkp_flags = 16;
pub type m64p_dbg_bkp_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_breakpoint {
    pub address: u32,
    pub endaddr: u32,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_m64p_breakpoint() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_breakpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_breakpoint>(),
        12usize,
        concat!("Size of: ", stringify!(m64p_breakpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_breakpoint>(),
        4usize,
        concat!("Alignment of ", stringify!(m64p_breakpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_breakpoint),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endaddr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_breakpoint),
            "::",
            stringify!(endaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_breakpoint),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_2d_size {
    pub uiWidth: ::std::os::raw::c_uint,
    pub uiHeight: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_m64p_2d_size() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_2d_size> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_2d_size>(),
        8usize,
        concat!("Size of: ", stringify!(m64p_2d_size))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_2d_size>(),
        4usize,
        concat!("Alignment of ", stringify!(m64p_2d_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uiWidth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_2d_size),
            "::",
            stringify!(uiWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uiHeight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_2d_size),
            "::",
            stringify!(uiHeight)
        )
    );
}
pub const m64p_GLattr_M64P_GL_DOUBLEBUFFER: m64p_GLattr = 1;
pub const m64p_GLattr_M64P_GL_BUFFER_SIZE: m64p_GLattr = 2;
pub const m64p_GLattr_M64P_GL_DEPTH_SIZE: m64p_GLattr = 3;
pub const m64p_GLattr_M64P_GL_RED_SIZE: m64p_GLattr = 4;
pub const m64p_GLattr_M64P_GL_GREEN_SIZE: m64p_GLattr = 5;
pub const m64p_GLattr_M64P_GL_BLUE_SIZE: m64p_GLattr = 6;
pub const m64p_GLattr_M64P_GL_ALPHA_SIZE: m64p_GLattr = 7;
pub const m64p_GLattr_M64P_GL_SWAP_CONTROL: m64p_GLattr = 8;
pub const m64p_GLattr_M64P_GL_MULTISAMPLEBUFFERS: m64p_GLattr = 9;
pub const m64p_GLattr_M64P_GL_MULTISAMPLESAMPLES: m64p_GLattr = 10;
pub const m64p_GLattr_M64P_GL_CONTEXT_MAJOR_VERSION: m64p_GLattr = 11;
pub const m64p_GLattr_M64P_GL_CONTEXT_MINOR_VERSION: m64p_GLattr = 12;
pub const m64p_GLattr_M64P_GL_CONTEXT_PROFILE_MASK: m64p_GLattr = 13;
pub type m64p_GLattr = ::std::os::raw::c_int;
pub const m64p_GLContextType_M64P_GL_CONTEXT_PROFILE_CORE: m64p_GLContextType = 0;
pub const m64p_GLContextType_M64P_GL_CONTEXT_PROFILE_COMPATIBILITY: m64p_GLContextType = 1;
pub const m64p_GLContextType_M64P_GL_CONTEXT_PROFILE_ES: m64p_GLContextType = 2;
pub type m64p_GLContextType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m64p_video_extension_functions {
    pub Functions: ::std::os::raw::c_uint,
    pub VidExtFuncInit: ::std::option::Option<unsafe extern "C" fn() -> m64p_error>,
    pub VidExtFuncQuit: ::std::option::Option<unsafe extern "C" fn() -> m64p_error>,
    pub VidExtFuncListModes: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut m64p_2d_size,
            arg2: *mut ::std::os::raw::c_int,
        ) -> m64p_error,
    >,
    pub VidExtFuncSetMode: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
        ) -> m64p_error,
    >,
    pub VidExtFuncGLGetProc: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> m64p_function,
    >,
    pub VidExtFuncGLSetAttr: ::std::option::Option<
        unsafe extern "C" fn(arg1: m64p_GLattr, arg2: ::std::os::raw::c_int) -> m64p_error,
    >,
    pub VidExtFuncGLGetAttr: ::std::option::Option<
        unsafe extern "C" fn(arg1: m64p_GLattr, arg2: *mut ::std::os::raw::c_int) -> m64p_error,
    >,
    pub VidExtFuncGLSwapBuf: ::std::option::Option<unsafe extern "C" fn() -> m64p_error>,
    pub VidExtFuncSetCaption: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> m64p_error,
    >,
    pub VidExtFuncToggleFS: ::std::option::Option<unsafe extern "C" fn() -> m64p_error>,
    pub VidExtFuncResizeWindow: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> m64p_error,
    >,
    pub VidExtFuncGLGetDefaultFramebuffer: ::std::option::Option<unsafe extern "C" fn() -> u32>,
}
#[test]
fn bindgen_test_layout_m64p_video_extension_functions() {
    const UNINIT: ::std::mem::MaybeUninit<m64p_video_extension_functions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m64p_video_extension_functions>(),
        104usize,
        concat!("Size of: ", stringify!(m64p_video_extension_functions))
    );
    assert_eq!(
        ::std::mem::align_of::<m64p_video_extension_functions>(),
        8usize,
        concat!("Alignment of ", stringify!(m64p_video_extension_functions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Functions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(Functions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncInit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncQuit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncQuit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncListModes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncListModes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncSetMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncSetMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncGLGetProc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncGLGetProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncGLSetAttr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncGLSetAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncGLGetAttr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncGLGetAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncGLSwapBuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncGLSwapBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncSetCaption) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncSetCaption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncToggleFS) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncToggleFS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VidExtFuncResizeWindow) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncResizeWindow)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).VidExtFuncGLGetDefaultFramebuffer) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(m64p_video_extension_functions),
            "::",
            stringify!(VidExtFuncGLGetDefaultFramebuffer)
        )
    );
}
#[doc = " Structures"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RSP_INFO {
    pub RDRAM: *mut ::std::os::raw::c_uchar,
    pub DMEM: *mut ::std::os::raw::c_uchar,
    pub IMEM: *mut ::std::os::raw::c_uchar,
    pub MI_INTR_REG: *mut ::std::os::raw::c_uint,
    pub SP_MEM_ADDR_REG: *mut ::std::os::raw::c_uint,
    pub SP_DRAM_ADDR_REG: *mut ::std::os::raw::c_uint,
    pub SP_RD_LEN_REG: *mut ::std::os::raw::c_uint,
    pub SP_WR_LEN_REG: *mut ::std::os::raw::c_uint,
    pub SP_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub SP_DMA_FULL_REG: *mut ::std::os::raw::c_uint,
    pub SP_DMA_BUSY_REG: *mut ::std::os::raw::c_uint,
    pub SP_PC_REG: *mut ::std::os::raw::c_uint,
    pub SP_SEMAPHORE_REG: *mut ::std::os::raw::c_uint,
    pub DPC_START_REG: *mut ::std::os::raw::c_uint,
    pub DPC_END_REG: *mut ::std::os::raw::c_uint,
    pub DPC_CURRENT_REG: *mut ::std::os::raw::c_uint,
    pub DPC_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub DPC_CLOCK_REG: *mut ::std::os::raw::c_uint,
    pub DPC_BUFBUSY_REG: *mut ::std::os::raw::c_uint,
    pub DPC_PIPEBUSY_REG: *mut ::std::os::raw::c_uint,
    pub DPC_TMEM_REG: *mut ::std::os::raw::c_uint,
    pub CheckInterrupts: ::std::option::Option<unsafe extern "C" fn()>,
    pub ProcessDlistList: ::std::option::Option<unsafe extern "C" fn()>,
    pub ProcessAlistList: ::std::option::Option<unsafe extern "C" fn()>,
    pub ProcessRdpList: ::std::option::Option<unsafe extern "C" fn()>,
    pub ShowCFB: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_RSP_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<RSP_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RSP_INFO>(),
        208usize,
        concat!("Size of: ", stringify!(RSP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<RSP_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(RSP_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDRAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(RDRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMEM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMEM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(IMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MI_INTR_REG) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(MI_INTR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_MEM_ADDR_REG) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_MEM_ADDR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_DRAM_ADDR_REG) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_DRAM_ADDR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_RD_LEN_REG) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_RD_LEN_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_WR_LEN_REG) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_WR_LEN_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_STATUS_REG) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_DMA_FULL_REG) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_DMA_FULL_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_DMA_BUSY_REG) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_DMA_BUSY_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_PC_REG) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_PC_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_SEMAPHORE_REG) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(SP_SEMAPHORE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_START_REG) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_START_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_END_REG) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_END_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_CURRENT_REG) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_CURRENT_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_STATUS_REG) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_CLOCK_REG) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_CLOCK_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_BUFBUSY_REG) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_BUFBUSY_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_PIPEBUSY_REG) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_PIPEBUSY_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_TMEM_REG) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(DPC_TMEM_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckInterrupts) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(CheckInterrupts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessDlistList) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(ProcessDlistList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessAlistList) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(ProcessAlistList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessRdpList) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(ProcessRdpList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowCFB) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(RSP_INFO),
            "::",
            stringify!(ShowCFB)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFX_INFO {
    pub HEADER: *mut ::std::os::raw::c_uchar,
    pub RDRAM: *mut ::std::os::raw::c_uchar,
    pub DMEM: *mut ::std::os::raw::c_uchar,
    pub IMEM: *mut ::std::os::raw::c_uchar,
    pub MI_INTR_REG: *mut ::std::os::raw::c_uint,
    pub DPC_START_REG: *mut ::std::os::raw::c_uint,
    pub DPC_END_REG: *mut ::std::os::raw::c_uint,
    pub DPC_CURRENT_REG: *mut ::std::os::raw::c_uint,
    pub DPC_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub DPC_CLOCK_REG: *mut ::std::os::raw::c_uint,
    pub DPC_BUFBUSY_REG: *mut ::std::os::raw::c_uint,
    pub DPC_PIPEBUSY_REG: *mut ::std::os::raw::c_uint,
    pub DPC_TMEM_REG: *mut ::std::os::raw::c_uint,
    pub VI_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub VI_ORIGIN_REG: *mut ::std::os::raw::c_uint,
    pub VI_WIDTH_REG: *mut ::std::os::raw::c_uint,
    pub VI_INTR_REG: *mut ::std::os::raw::c_uint,
    pub VI_V_CURRENT_LINE_REG: *mut ::std::os::raw::c_uint,
    pub VI_TIMING_REG: *mut ::std::os::raw::c_uint,
    pub VI_V_SYNC_REG: *mut ::std::os::raw::c_uint,
    pub VI_H_SYNC_REG: *mut ::std::os::raw::c_uint,
    pub VI_LEAP_REG: *mut ::std::os::raw::c_uint,
    pub VI_H_START_REG: *mut ::std::os::raw::c_uint,
    pub VI_V_START_REG: *mut ::std::os::raw::c_uint,
    pub VI_V_BURST_REG: *mut ::std::os::raw::c_uint,
    pub VI_X_SCALE_REG: *mut ::std::os::raw::c_uint,
    pub VI_Y_SCALE_REG: *mut ::std::os::raw::c_uint,
    pub CheckInterrupts: ::std::option::Option<unsafe extern "C" fn()>,
    pub version: ::std::os::raw::c_uint,
    pub SP_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub RDRAM_SIZE: *const ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GFX_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<GFX_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GFX_INFO>(),
        248usize,
        concat!("Size of: ", stringify!(GFX_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<GFX_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(GFX_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HEADER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(HEADER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDRAM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(RDRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMEM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMEM) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(IMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MI_INTR_REG) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(MI_INTR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_START_REG) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_START_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_END_REG) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_END_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_CURRENT_REG) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_CURRENT_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_STATUS_REG) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_CLOCK_REG) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_CLOCK_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_BUFBUSY_REG) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_BUFBUSY_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_PIPEBUSY_REG) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_PIPEBUSY_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DPC_TMEM_REG) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(DPC_TMEM_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_STATUS_REG) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_ORIGIN_REG) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_ORIGIN_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_WIDTH_REG) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_WIDTH_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_INTR_REG) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_INTR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_V_CURRENT_LINE_REG) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_V_CURRENT_LINE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_TIMING_REG) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_TIMING_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_V_SYNC_REG) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_V_SYNC_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_H_SYNC_REG) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_H_SYNC_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_LEAP_REG) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_LEAP_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_H_START_REG) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_H_START_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_V_START_REG) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_V_START_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_V_BURST_REG) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_V_BURST_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_X_SCALE_REG) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_X_SCALE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VI_Y_SCALE_REG) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(VI_Y_SCALE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckInterrupts) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(CheckInterrupts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP_STATUS_REG) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(SP_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDRAM_SIZE) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GFX_INFO),
            "::",
            stringify!(RDRAM_SIZE)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUDIO_INFO {
    pub RDRAM: *mut ::std::os::raw::c_uchar,
    pub DMEM: *mut ::std::os::raw::c_uchar,
    pub IMEM: *mut ::std::os::raw::c_uchar,
    pub MI_INTR_REG: *mut ::std::os::raw::c_uint,
    pub AI_DRAM_ADDR_REG: *mut ::std::os::raw::c_uint,
    pub AI_LEN_REG: *mut ::std::os::raw::c_uint,
    pub AI_CONTROL_REG: *mut ::std::os::raw::c_uint,
    pub AI_STATUS_REG: *mut ::std::os::raw::c_uint,
    pub AI_DACRATE_REG: *mut ::std::os::raw::c_uint,
    pub AI_BITRATE_REG: *mut ::std::os::raw::c_uint,
    pub CheckInterrupts: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_AUDIO_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<AUDIO_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AUDIO_INFO>(),
        88usize,
        concat!("Size of: ", stringify!(AUDIO_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<AUDIO_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(AUDIO_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDRAM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(RDRAM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMEM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(DMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMEM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(IMEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MI_INTR_REG) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(MI_INTR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_DRAM_ADDR_REG) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_DRAM_ADDR_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_LEN_REG) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_LEN_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_CONTROL_REG) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_CONTROL_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_STATUS_REG) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_STATUS_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_DACRATE_REG) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_DACRATE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AI_BITRATE_REG) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(AI_BITRATE_REG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckInterrupts) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDIO_INFO),
            "::",
            stringify!(CheckInterrupts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL {
    pub Present: ::std::os::raw::c_int,
    pub RawData: ::std::os::raw::c_int,
    pub Plugin: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CONTROL() {
    const UNINIT: ::std::mem::MaybeUninit<CONTROL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CONTROL>(),
        12usize,
        concat!("Size of: ", stringify!(CONTROL))
    );
    assert_eq!(
        ::std::mem::align_of::<CONTROL>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Present) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL),
            "::",
            stringify!(Present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawData) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL),
            "::",
            stringify!(RawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Plugin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL),
            "::",
            stringify!(Plugin)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BUTTONS {
    pub Value: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: BUTTONS__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct BUTTONS__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_BUTTONS__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<BUTTONS__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(BUTTONS__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<BUTTONS__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(BUTTONS__bindgen_ty_1))
    );
}
impl BUTTONS__bindgen_ty_1 {
    #[inline]
    pub fn R_DPAD(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_R_DPAD(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn L_DPAD(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_L_DPAD(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn D_DPAD(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_D_DPAD(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn U_DPAD(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_U_DPAD(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn START_BUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_START_BUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z_TRIG(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z_TRIG(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn B_BUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_B_BUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn A_BUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_A_BUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn R_CBUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_R_CBUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn L_CBUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_L_CBUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn D_CBUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_D_CBUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn U_CBUTTON(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_U_CBUTTON(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn R_TRIG(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_R_TRIG(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn L_TRIG(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_L_TRIG(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn X_AXIS(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_X_AXIS(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn Y_AXIS(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Y_AXIS(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        R_DPAD: ::std::os::raw::c_uint,
        L_DPAD: ::std::os::raw::c_uint,
        D_DPAD: ::std::os::raw::c_uint,
        U_DPAD: ::std::os::raw::c_uint,
        START_BUTTON: ::std::os::raw::c_uint,
        Z_TRIG: ::std::os::raw::c_uint,
        B_BUTTON: ::std::os::raw::c_uint,
        A_BUTTON: ::std::os::raw::c_uint,
        R_CBUTTON: ::std::os::raw::c_uint,
        L_CBUTTON: ::std::os::raw::c_uint,
        D_CBUTTON: ::std::os::raw::c_uint,
        U_CBUTTON: ::std::os::raw::c_uint,
        R_TRIG: ::std::os::raw::c_uint,
        L_TRIG: ::std::os::raw::c_uint,
        Reserved1: ::std::os::raw::c_uint,
        Reserved2: ::std::os::raw::c_uint,
        X_AXIS: ::std::os::raw::c_int,
        Y_AXIS: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let R_DPAD: u32 = unsafe { ::std::mem::transmute(R_DPAD) };
            R_DPAD as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let L_DPAD: u32 = unsafe { ::std::mem::transmute(L_DPAD) };
            L_DPAD as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let D_DPAD: u32 = unsafe { ::std::mem::transmute(D_DPAD) };
            D_DPAD as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let U_DPAD: u32 = unsafe { ::std::mem::transmute(U_DPAD) };
            U_DPAD as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let START_BUTTON: u32 = unsafe { ::std::mem::transmute(START_BUTTON) };
            START_BUTTON as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let Z_TRIG: u32 = unsafe { ::std::mem::transmute(Z_TRIG) };
            Z_TRIG as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let B_BUTTON: u32 = unsafe { ::std::mem::transmute(B_BUTTON) };
            B_BUTTON as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let A_BUTTON: u32 = unsafe { ::std::mem::transmute(A_BUTTON) };
            A_BUTTON as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let R_CBUTTON: u32 = unsafe { ::std::mem::transmute(R_CBUTTON) };
            R_CBUTTON as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let L_CBUTTON: u32 = unsafe { ::std::mem::transmute(L_CBUTTON) };
            L_CBUTTON as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let D_CBUTTON: u32 = unsafe { ::std::mem::transmute(D_CBUTTON) };
            D_CBUTTON as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let U_CBUTTON: u32 = unsafe { ::std::mem::transmute(U_CBUTTON) };
            U_CBUTTON as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let R_TRIG: u32 = unsafe { ::std::mem::transmute(R_TRIG) };
            R_TRIG as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let L_TRIG: u32 = unsafe { ::std::mem::transmute(L_TRIG) };
            L_TRIG as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let Reserved2: u32 = unsafe { ::std::mem::transmute(Reserved2) };
            Reserved2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let X_AXIS: u32 = unsafe { ::std::mem::transmute(X_AXIS) };
            X_AXIS as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let Y_AXIS: u32 = unsafe { ::std::mem::transmute(Y_AXIS) };
            Y_AXIS as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_BUTTONS() {
    const UNINIT: ::std::mem::MaybeUninit<BUTTONS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BUTTONS>(),
        4usize,
        concat!("Size of: ", stringify!(BUTTONS))
    );
    assert_eq!(
        ::std::mem::align_of::<BUTTONS>(),
        4usize,
        concat!("Alignment of ", stringify!(BUTTONS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BUTTONS),
            "::",
            stringify!(Value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL_INFO {
    pub Controls: *mut CONTROL,
}
#[test]
fn bindgen_test_layout_CONTROL_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CONTROL_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CONTROL_INFO>(),
        8usize,
        concat!("Size of: ", stringify!(CONTROL_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CONTROL_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CONTROL_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Controls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_INFO),
            "::",
            stringify!(Controls)
        )
    );
}
pub type ptr_RomClosed = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_RomOpen = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type ptr_ChangeWindow = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_InitiateGFX =
    ::std::option::Option<unsafe extern "C" fn(Gfx_Info: GFX_INFO) -> ::std::os::raw::c_int>;
pub type ptr_MoveScreen =
    ::std::option::Option<unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)>;
pub type ptr_ProcessDList = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_ProcessRDPList = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_ShowCFB = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_UpdateScreen = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_ViStatusChanged = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_ViWidthChanged = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_ReadScreen2 = ::std::option::Option<
    unsafe extern "C" fn(
        dest: *mut ::std::os::raw::c_void,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        front: ::std::os::raw::c_int,
    ),
>;
pub type ptr_SetRenderingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ),
>;
pub type ptr_ResizeVideoOutput = ::std::option::Option<
    unsafe extern "C" fn(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FrameBufferInfo {
    pub addr: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FrameBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<FrameBufferInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FrameBufferInfo>(),
        16usize,
        concat!("Size of: ", stringify!(FrameBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FrameBufferInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(FrameBufferInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameBufferInfo),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameBufferInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameBufferInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameBufferInfo),
            "::",
            stringify!(height)
        )
    );
}
pub type ptr_FBRead = ::std::option::Option<unsafe extern "C" fn(addr: ::std::os::raw::c_uint)>;
pub type ptr_FBWrite = ::std::option::Option<
    unsafe extern "C" fn(addr: ::std::os::raw::c_uint, size: ::std::os::raw::c_uint),
>;
pub type ptr_FBGetFrameBufferInfo =
    ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void)>;
pub type ptr_AiDacrateChanged =
    ::std::option::Option<unsafe extern "C" fn(SystemType: ::std::os::raw::c_int)>;
pub type ptr_AiLenChanged = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_InitiateAudio =
    ::std::option::Option<unsafe extern "C" fn(Audio_Info: AUDIO_INFO) -> ::std::os::raw::c_int>;
pub type ptr_ProcessAList = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_SetSpeedFactor =
    ::std::option::Option<unsafe extern "C" fn(percent: ::std::os::raw::c_int)>;
pub type ptr_VolumeUp = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_VolumeDown = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_VolumeGetLevel =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type ptr_VolumeSetLevel =
    ::std::option::Option<unsafe extern "C" fn(level: ::std::os::raw::c_int)>;
pub type ptr_VolumeMute = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_VolumeGetString =
    ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
pub type ptr_ControllerCommand = ::std::option::Option<
    unsafe extern "C" fn(Control: ::std::os::raw::c_int, Command: *mut ::std::os::raw::c_uchar),
>;
pub type ptr_GetKeys =
    ::std::option::Option<unsafe extern "C" fn(Control: ::std::os::raw::c_int, Keys: *mut BUTTONS)>;
pub type ptr_InitiateControllers =
    ::std::option::Option<unsafe extern "C" fn(ControlInfo: CONTROL_INFO)>;
pub type ptr_ReadController = ::std::option::Option<
    unsafe extern "C" fn(Control: ::std::os::raw::c_int, Command: *mut ::std::os::raw::c_uchar),
>;
pub type ptr_SDL_KeyDown = ::std::option::Option<
    unsafe extern "C" fn(keymod: ::std::os::raw::c_int, keysym: ::std::os::raw::c_int),
>;
pub type ptr_SDL_KeyUp = ::std::option::Option<
    unsafe extern "C" fn(keymod: ::std::os::raw::c_int, keysym: ::std::os::raw::c_int),
>;
pub type ptr_RenderCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type ptr_DoRspCycles = ::std::option::Option<
    unsafe extern "C" fn(Cycles: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
>;
pub type ptr_InitiateRSP = ::std::option::Option<
    unsafe extern "C" fn(Rsp_Info: RSP_INFO, CycleCount: *mut ::std::os::raw::c_uint),
>;
